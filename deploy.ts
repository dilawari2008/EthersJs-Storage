import { ethers } from "ethers";
import fs from "fs-extra";
import dotenv from "dotenv";

dotenv.config();

const main = async () => {
  const provider = new ethers.providers.JsonRpcProvider(
    process.env.RPC_URL ?? ''
  ); // connect to blockchain using RPC URL
  console.log(process.env.RPC_URL);
  const wallet = new ethers.Wallet(
    process.env.PRIVATE_KEY ?? '', // private key with fallback to empty string
    provider
  );
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying, please wait...");

  // contractFactory.deploy() initiates the deployment process
  // It returns a Promise that resolves to the deployed Contract instance
  const contract = await contractFactory.deploy();

  // contract.deployTransaction is the transaction response for the deployment
  // It contains information about the transaction that deployed the contract
  // console.log("Deployment transaction:", contract.deployTransaction);

  // Waiting for the deployment transaction to be mined
  const transactionReceipt = await contract.deployTransaction.wait(1);
  console.log(`Contract Address: ${contract.address}`);
  // console.log("Deployment receipt:", transactionReceipt);

  // console.log('Here is the transaction response',  contract.deployTransaction);
  // console.log('Here is the transaction receipt',  transactionReceipt);

  // The contract instance after deployment
  // console.log("Deployed contract instance:", contract);
  // console.log("Contract deployed to:", contract.address);


  // Lets deploy with only transaction data
  // const nonce = await wallet.getTransactionCount();
  // const gasPrice = await wallet.getGasPrice();
  // const chainId = await wallet.getChainId();
  // console.log(`gasPrice: ${gasPrice} chainId: ${chainId}`);
  // const tx = {
  //   nonce,
  //   gasPrice,
  //   gasLimit: 1000000,
  //   to: undefined,
  //   value: 0,
  //   data: "0x60806040526040518060400160405280600081526020016040518060400160405280600381526020017f7965730000000000000000000000000000000000000000000000000000000000815250815250600260008201518160000155602082015181600101908051906020019061007792919061008c565b50505034801561008657600080fd5b50610190565b8280546100989061012f565b90600052602060002090601f0160209004810192826100ba5760008555610101565b82601f106100d357805160ff1916838001178555610101565b82800160010185558215610101579182015b828111156101005782518255916020019190600101906100e5565b5b50905061010e9190610112565b5090565b5b8082111561012b576000816000905550600101610113565b5090565b6000600282049050600182168061014757607f821691505b6020821081141561015b5761015a610161565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6108ad8061019f6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806377ec2b551161005b57806377ec2b5514610103578063795fff1d146101225780638a4bf52c1461013e5780639e7a13ad1461016e57610088565b80632e64cec11461008d5780633c8df652146100ab5780634f2be91f146100c95780636057361d146100e7575b600080fd5b61009561019f565b6040516100a29190610666565b60405180910390f35b6100b36101a9565b6040516100c09190610666565b60405180910390f35b6100d16101af565b6040516100de9190610666565b60405180910390f35b61010160048036038101906100fc91906105a9565b6101b8565b005b61010b6101c2565b604051610119929190610681565b60405180910390f35b61013c6004803603810190610137919061054d565b61025c565b005b61015860048036038101906101539190610504565b6102f2565b6040516101659190610666565b60405180910390f35b610188600480360381019061018391906105a9565b610320565b604051610196929190610681565b60405180910390f35b6000600454905090565b60045481565b60006002905090565b8060048190555050565b60028060000154908060010180546101d99061077a565b80601f01602080910402602001604051908101604052809291908181526020018280546102059061077a565b80156102525780601f1061022757610100808354040283529160200191610252565b820191906000526020600020905b81548152906001019060200180831161023557829003601f168201915b5050505050905082565b6000604051806040016040528083815260200184815250905060008190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906102c79291906103dc565b505050816001846040516102db919061064f565b908152602001604051809103902081905550505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000818154811061033057600080fd5b90600052602060002090600202016000915090508060000154908060010180546103599061077a565b80601f01602080910402602001604051908101604052809291908181526020018280546103859061077a565b80156103d25780601f106103a7576101008083540402835291602001916103d2565b820191906000526020600020905b8154815290600101906020018083116103b557829003601f168201915b5050505050905082565b8280546103e89061077a565b90600052602060002090601f01602090048101928261040a5760008555610451565b82601f1061042357805160ff1916838001178555610451565b82800160010185558215610451579182015b82811115610450578251825591602001919060010190610435565b5b50905061045e9190610462565b5090565b5b8082111561047b576000816000905550600101610463565b5090565b600061049261048d846106d6565b6106b1565b9050828152602081018484840111156104ae576104ad610840565b5b6104b9848285610738565b509392505050565b600082601f8301126104d6576104d561083b565b5b81356104e684826020860161047f565b91505092915050565b6000813590506104fe81610860565b92915050565b60006020828403121561051a5761051961084a565b5b600082013567ffffffffffffffff81111561053857610537610845565b5b610544848285016104c1565b91505092915050565b600080604083850312156105645761056361084a565b5b600083013567ffffffffffffffff81111561058257610581610845565b5b61058e858286016104c1565b925050602061059f858286016104ef565b9150509250929050565b6000602082840312156105bf576105be61084a565b5b60006105cd848285016104ef565b91505092915050565b60006105e182610707565b6105eb8185610712565b93506105fb818560208601610747565b6106048161084f565b840191505092915050565b600061061a82610707565b6106248185610723565b9350610634818560208601610747565b80840191505092915050565b6106498161072e565b82525050565b600061065b828461060f565b915081905092915050565b600060208201905061067b6000830184610640565b92915050565b60006040820190506106966000830185610640565b81810360208301526106a881846105d6565b90509392505050565b60006106bb6106cc565b90506106c782826107ac565b919050565b6000604051905090565b600067ffffffffffffffff8211156106f1576106f061080c565b5b6106fa8261084f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561076557808201518184015260208101905061074a565b83811115610774576000848401525b50505050565b6000600282049050600182168061079257607f821691505b602082108114156107a6576107a56107dd565b5b50919050565b6107b58261084f565b810181811067ffffffffffffffff821117156107d4576107d361080c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6108698161072e565b811461087457600080fd5b5056fea264697066735822122041eccb0008a468809340f1676881719ae2fb2dde65e934150f0090f6ebaa749064736f6c63430008070033",
  //   chainId,
  // };

  // const resp = await wallet.signTransaction(tx);
  // console.log(resp);
  // const sentTxResponse = await wallet.sendTransaction(tx);
  // console.log(sentTxResponse);

  const currentFaouriteNumber = await contract.retrieve(); // shouldn't cost any gas as view and pure functions don't cost gas
  console.log(currentFaouriteNumber.toString()); // output is BigNumber cuz the number is too large for js number type, so stringify the output
  const txResp = await contract.store("7"); // can pass just 7 instead of "7", but passing as string for BigNumber
  const txReceipt = await txResp.wait(1);
  const newFavoriteNumber = await contract.retrieve();
  console.log(newFavoriteNumber.toString());
    
};

main()
  .then(() => process.exit(0))
  .catch((err) => {
    console.error(err);
    process.exit(1);
  });
